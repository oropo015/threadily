/**
 * Local emotion analysis
 */
export function analyzeLocalEmotions(text: string): Record<string, number> {
  const emotions: Record<string, number> = {
    joy: 0,
    sadness: 0,
    anger: 0,
    fear: 0,
    surprise: 0,
    disgust: 0,
  }

  // Emotion keywords
  const emotionKeywords: Record<string, string[]> = {
    joy: [
      "happy",
      "happiness",
      "joy",
      "joyful",
      "delighted",
      "pleased",
      "glad",
      "cheerful",
      "content",
      "satisfied",
      "elated",
      "thrilled",
      "excited",
      "ecstatic",
      "merry",
      "jubilant",
      "enjoy",
      "enjoying",
      "enjoyed",
      "love",
      "loving",
      "loved",
      "adore",
      "adoring",
      "adored",
      "like",
      "liking",
      "liked",
      "celebrate",
      "celebrating",
      "celebrated",
      "celebration",
      "congratulations",
      "congrats",
      "proud",
      "pride",
      "laugh",
      "laughing",
      "laughed",
      "smile",
      "smiling",
      "smiled",
      "grin",
      "grinning",
      "grinned",
      "haha",
      "lol",
      "rofl",
      "lmao",
      "amused",
      "amusement",
      "fun",
      "funny",
      "hilarious",
      "humor",
      "humorous",
    ],
    sadness: [
      "sad",
      "sadness",
      "unhappy",
      "depressed",
      "depression",
      "depressing",
      "miserable",
      "misery",
      "sorrow",
      "sorrowful",
      "grief",
      "grieving",
      "grieved",
      "mourn",
      "mourning",
      "mourned",
      "cry",
      "crying",
      "cried",
      "tears",
      "tearful",
      "weep",
      "weeping",
      "wept",
      "sob",
      "sobbing",
      "sobbed",
      "heartbroken",
      "heartbreak",
      "devastated",
      "devastation",
      "upset",
      "distressed",
      "distress",
      "disappointed",
      "disappointment",
      "regret",
      "regretful",
      "regretted",
      "sorry",
      "apology",
      "apologize",
      "apologized",
      "unfortunate",
      "unfortunate",
      "tragic",
      "tragedy",
      "melancholy",
      "gloomy",
      "gloom",
      "despair",
      "despairing",
      "despaired",
    ],
    anger: [
      "angry",
      "anger",
      "mad",
      "furious",
      "fury",
      "outraged",
      "outrage",
      "annoyed",
      "annoy",
      "annoying",
      "irritated",
      "irritate",
      "irritating",
      "frustrated",
      "frustrate",
      "frustrating",
      "frustration",
      "enraged",
      "rage",
      "raging",
      "raged",
      "hate",
      "hating",
      "hated",
      "hatred",
      "hostile",
      "hostility",
      "resent",
      "resenting",
      "resented",
      "resentment",
      "bitter",
      "bitterness",
      "disgusted",
      "disgust",
      "disgusting",
      "indignant",
      "indignation",
      "offended",
      "offense",
      "offensive",
      "aggravated",
      "aggravate",
      "aggravating",
      "exasperated",
      "exasperate",
      "exasperating",
      "infuriated",
      "infuriate",
      "infuriating",
      "livid",
      "seething",
      "seethe",
      "seethed",
      "fuming",
      "fume",
      "fumed",
    ],
    fear: [
      "afraid",
      "fear",
      "fearful",
      "scared",
      "scare",
      "scaring",
      "scared",
      "frightened",
      "frighten",
      "frightening",
      "terrified",
      "terrify",
      "terrifying",
      "anxious",
      "anxiety",
      "worried",
      "worry",
      "worrying",
      "worried",
      "nervous",
      "nervousness",
      "panic",
      "panicking",
      "panicked",
      "dread",
      "dreading",
      "dreaded",
      "horror",
      "horrified",
      "horrify",
      "horrifying",
      "alarmed",
      "alarm",
      "alarming",
      "apprehensive",
      "apprehension",
      "uneasy",
      "unease",
      "tense",
      "tension",
      "stressed",
      "stress",
      "stressing",
      "stressed",
      "phobia",
      "phobic",
      "terror",
      "terrorized",
      "terrorize",
      "terrorizing",
      "petrified",
      "petrify",
      "petrifying",
    ],
    surprise: [
      "surprised",
      "surprise",
      "surprising",
      "astonished",
      "astonish",
      "astonishing",
      "astonishment",
      "amazed",
      "amaze",
      "amazing",
      "amazement",
      "shocked",
      "shock",
      "shocking",
      "startled",
      "startle",
      "startling",
      "stunned",
      "stun",
      "stunning",
      "unexpected",
      "unforeseen",
      "unanticipated",
      "wonder",
      "wondering",
      "wondered",
      "awe",
      "awed",
      "awesome",
      "astounded",
      "astound",
      "astounding",
      "dumbfounded",
      "dumbfound",
      "dumbfounding",
      "flabbergasted",
      "bewildered",
      "bewilderment",
      "speechless",
      "wow",
      "omg",
      "oh my god",
      "oh my goodness",
      "gosh",
      "whoa",
      "woah",
      "unbelievable",
      "incredible",
      "remarkable",
    ],
    disgust: [
      "disgusted",
      "disgust",
      "disgusting",
      "repulsed",
      "repulse",
      "repulsive",
      "revolted",
      "revolt",
      "revolting",
      "nauseated",
      "nauseate",
      "nauseating",
      "nauseous",
      "sickened",
      "sicken",
      "sickening",
      "gross",
      "grossed",
      "grossing",
      "nasty",
      "foul",
      "repugnant",
      "repugnance",
      "abhorrent",
      "abhor",
      "abhorring",
      "abhorred",
      "loathe",
      "loathing",
      "loathed",
      "detest",
      "detesting",
      "detested",
      "detestation",
      "despise",
      "despising",
      "despised",
      "aversion",
      "averse",
      "distaste",
      "distasteful",
      "yuck",
      "yucky",
      "ew",
      "eww",
      "ugh",
      "icky",
      "vile",
      "filthy",
      "filth",
      "offensive",
      "repellent",
    ],
  }

  const textLower = text.toLowerCase()

  // Calculate emotion scores based on keyword presence
  Object.entries(emotionKeywords).forEach(([emotion, keywords]) => {
    let score = 0
    keywords.forEach((keyword) => {
      // Use word boundary to match whole words
      const regex = new RegExp(`\\b${keyword}\\b`, "gi")
      const matches = textLower.match(regex)
      if (matches) {
        score += matches.length
      }
    })

    // Normalize score based on text length
    const wordCount = text.split(/\s+/).length || 1
    emotions[emotion] = score / (wordCount * 0.1) // Scale factor to get reasonable values

    // Cap at 1.0
    if (emotions[emotion] > 1) {
      emotions[emotion] = 1
    }
  })

  return emotions
}

/**
 * Get dominant emotion from emotions object
 */
export function getDominantEmotion(emotions: Record<string, number>): string {
  if (Object.keys(emotions).length === 0) {
    return "neutral"
  }

  let dominantEmotion = "neutral"
  let highestScore = 0

  Object.entries(emotions).forEach(([emotion, score]) => {
    if (score > highestScore) {
      highestScore = score
      dominantEmotion = emotion
    }
  })

  // If no strong emotion is detected, return neutral
  if (highestScore < 0.15) {
    return "neutral"
  }

  return dominantEmotion
}
